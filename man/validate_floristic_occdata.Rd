% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_floristic_occdata.R
\name{validate_floristic_occdata}
\alias{validate_floristic_occdata}
\title{Validiert floristische Funddaten gemaess des BFN-Datenstandards fuer floristische Funddaten (CSV, JSON-String oder JSON-Datei)}
\usage{
validate_floristic_occdata(
  input,
  schema = NULL,
  stop_on_error = TRUE,
  verbose = TRUE,
  prefix_nachweis_obj = "nachweis",
  allow_na_if_name_contains = "person"
)
}
\arguments{
\item{input}{Ein Dataframe, eine Liste von Tabellen, ein JSON-String oder der Pfad zu einer JSON-Datei mit floristischen Daten.}

\item{schema}{Optional. Ein JSON-Schema zur Validierung (als JSON-String oder R-Liste). Standard: `NULL`.}

\item{stop_on_error}{Logical. Wenn `TRUE`, wird die Ausfuehrung bei Fehlern gestoppt. Default: `TRUE`.}

\item{verbose}{Logical. Wenn `TRUE`, werden informative Meldungen ausgegeben. Default: `TRUE`.}

\item{prefix_nachweis_obj}{Character. Basisname fuer die Nachweisobjekte im Datensatz (z. B. `"nachweis"` oder `"fund"`). Dient zur Erkennung der Nachweis-Tabelle. Default: `"nachweis"`.}

\item{allow_na_if_name_contains}{Character-Vektor. Falls Spaltennamen diesen String enthalten (z. B. `"person"` oder `"ereignis"`), duerfen Namen `NA` sein. Default: `"person"`.}
}
\value{
Eine Liste mit:
\describe{
  \item{check_results}{Liste mit Validierungsergebnissen pro Objekttabelle (inkl. Status, Nachricht, Roh- und bereinigten Daten).}
  \item{validation_json}{JSON-String mit unbearbeiteten Eingabedaten (strukturkonform).}
  \item{export_json}{JSON-String mit bereinigten, eindeutigen Eintraegen pro Objekt.}
  \item{json_valid}{Logical. Ergebnis der Schema-Validierung (`TRUE`/`FALSE`) oder `NULL`, wenn kein Schema uebergeben wurde.}
  \item{validation_errors}{Liste der Schemafehler (nur bei `json_valid = FALSE`).}
  \item{missing_fields}{Liste der erwarteten, aber fehlenden Felder je Objekttabelle.}
}

# Beispiel: Mit Schema-Datei pruefen
schema_path <- system.file("schemas", "structure.schema.json", package = "dufloR")
validate_floristic_data(df, schema = schema_path)
}
\description{
Diese Funktion validiert floristische Datenstrukturen in R gegen ein JSON-Schema, das dem DUFLOR-Standard entspricht.
Sie akzeptiert verschiedene Eingabeformate (Dataframe, Liste von Tabellen, JSON-String, Dateipfad) und prueft die Struktur und Konsistenz der enthaltenen Daten.
}
\details{
**Unterstuetzte Eingaben:**
- Ein einzelner `data.frame` mit kombinierten Daten aller Objekttypen.
- Eine `list` mit benannten Tabellen (z. B. `list(Projekte = df1, Nachweise = df2)`).
- Ein gueltiger JSON-String.
- Ein Pfad zu einer JSON-Datei.

**Validierungslogik:**
- Prueft, ob Pflichttabellen (z. B. Projekte, Nachweise, Lokalitaeten) vorhanden sind.
- Meldet fehlende Spalten.
- Prueft Dubletten (mehrfach identische Zeilen).
- Prueft, ob IDs eindeutig auf Namen abbildbar sind (und umgekehrt).
- Ignoriert fehlende Namen optional fuer bestimmte Objekte (z. B. `personName`).
- Gibt strukturierte Pruefergebnisse und JSON-Exporte zurueck.
}
